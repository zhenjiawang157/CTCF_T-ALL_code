'''
In the scatter plot generated by py4, some constitutive bindings also show interaction change 
between Jurkat vs. A6010 Hi-C datasets, and here we want keep those constitutive bindings that:
* show less CTCF bindings signal change between TALL vs. normal 
  -- generate all signal change distribution, gained/lost should occur in two tails
  -- use a proper std, rather than only remove extremers, e.g., gained/lost bindings)

* do not have gained/lost bindings within same domain
  -- select those constitutive bindings do not have gained/lost between

use re-selected constitutive bindings as control for the scatter plot
'''

import sys,argparse
import os,glob
import numpy as np
import pandas as pd
from scipy import stats
import re,bisect
import myplot

constitutive_file = '/nv/vol190/zanglab/zw5j/work2017/T_ALL_CTCF/9_get_CTCF_signals_plus_appended_data/f4_lost_on_consistent_binding/f1_consistent_bindings/f1_consistent_bindings/constitutive_CTCF_bindings_thre0.8.bed'
    
def return_const_doamin_keptID_info():
    
    #constitutive_file = '/nv/vol190/zanglab/zw5j/work2017/T_ALL_CTCF/9_get_CTCF_signals_plus_appended_data/f4_lost_on_consistent_binding/f1_consistent_bindings/f1_consistent_bindings/constitutive_CTCF_bindings_thre0.8.bed'
    with open(constitutive_file) as constitutive_inf:
        const_df = pd.read_csv(constitutive_inf,sep='\t',index_col = 3,header=None)
        const_df.columns = ['chr','start','end','score','strand']

    ctcf_domain_file = '/nv/vol190/zanglab/zw5j/work2017/T_ALL_CTCF/10_CTCF_binding_signals_vs_gene_expression/fz_gene_CTCF_mete_info/commonly_used_modules_files/all_CTCF_domainInfo_GT100K_EachSide.csv'
    with open(ctcf_domain_file) as ctcf_domain_inf:
        ctcf_domain_df = pd.read_csv(ctcf_domain_inf)

    union_file = '/nv/vol190/zanglab/zw5j/work2017/T_ALL_CTCF/9_get_CTCF_signals_plus_appended_data/f3_union_CTCF_regions/f2_union_all_peaks/f1_peak2000_datasets_and_union_summits/union_summits_width_150.bed'
    with open(union_file) as union_inf:
        union_df = pd.read_csv(union_inf,sep='\t',index_col = 3,header=None)
        union_df.columns = ['chr','start','end','score','strand']
    return const_df, ctcf_domain_df, union_df


def return_ctcf_filtered_ids():
    ctcf_filtered_ids_file = '/nv/vol190/zanglab/zw5j/work2017/T_ALL_CTCF/10_CTCF_binding_signals_vs_gene_expression/fz_gene_CTCF_mete_info/commonly_used_modules_files/union_CTCF_kept_ids_sample_thre_2.csv'
    with open(ctcf_filtered_ids_file) as ctcf_filtered_ids_inf:
        ctcf_filtered_ids = [int(i.strip()) for i in ctcf_filtered_ids_inf.readlines()]
    return ctcf_filtered_ids

    
def select_ids_by_fdr(cancertype,fdr_thre):
    # use HC to filter out p<0.05 T-ALL bindings
    fdr_file = '/nv/vol190/zanglab/zw5j/work2017/T_ALL_CTCF/12_new_gained_lost_from_all_features/f2_bindings_signals_fdr/f1_cancertype_ttest_fdr_logFC/{}_signals_ttest_fdr.csv'.format(cancertype)
    with open(fdr_file) as fdr_inf:
        fdr_df = pd.read_csv(fdr_inf,sep='\t',index_col=0)
    #print(fdr_df.columns);exit()  
    df_sig = fdr_df[(fdr_df['cancer_vs_other_adjp']<fdr_thre)]
    df_sig = df_sig[(df_sig['cancer_vs_normal_adjp']<fdr_thre)]

    #print(df_sig);exit()
    return df_sig.index


def select_ids_by_log2FC(cancertype,log2FC_thre):
    # use HC to filter out p<0.05 T-ALL bindings
    fdr_file = '/nv/vol190/zanglab/zw5j/work2017/T_ALL_CTCF/12_new_gained_lost_from_all_features/f2_bindings_signals_fdr/f1_cancertype_ttest_fdr_logFC/{}_signals_ttest_fdr.csv'.format(cancertype)
    with open(fdr_file) as fdr_inf:
        fdr_df = pd.read_csv(fdr_inf,sep='\t',index_col=0)
    #print(fdr_df.columns);exit()  
    fdr_df['cancer_other_fc'] = np.log2(fdr_df['cancer_mean']+0.001)-np.log2(fdr_df['ctrl_mean']+0.001)
    fdr_df['cancer_normal_fc'] = np.log2(fdr_df['cancer_mean']+0.001)-np.log2(fdr_df['normal_mean']+0.001)
    
    fdr_df = fdr_df[(fdr_df['cancer_other_fc']<1)&(fdr_df['cancer_other_fc']>-1)]
    fdr_df = fdr_df[(fdr_df['cancer_normal_fc']<1)&(fdr_df['cancer_normal_fc']>-1)]

    print('log2FC',fdr_df.shape)#;exit()
    return fdr_df.index


   
def main_cancertype(cancertype,fdr_thre=0.01,expand = 10000):

    outdir = 'f4_cancertype_proper_ctrl'
    os.makedirs(outdir,exist_ok=True)
    const_df, ctcf_domain_df, union_df = return_const_doamin_keptID_info()
    kept_ids = return_ctcf_filtered_ids()
   
    fdr_filtered_ids =  select_ids_by_fdr(cancertype,fdr_thre)
    # only keep those bindings occur in >2 datasets
    fdr_filtered_ids = fdr_filtered_ids.intersection(kept_ids)   
    print(cancertype,len(fdr_filtered_ids))
    
    # here is to filter out those constiutive bindings that nearby sig_p<0.01 bindings
    fdr_filtered_ids_df = union_df.loc[fdr_filtered_ids]
    fdr_filtered_ids_file = '{}/{}_fdr_LT_{}.bed'.format(outdir,cancertype,fdr_thre)
    fdr_filtered_ids_df.to_csv(fdr_filtered_ids_file,sep='\t',header=None,index=False)
    # constitutive not overlapped with fdr_filtered_ids
    if cancertype=='T-ALL_LineageCtrl':
        cancertype='T-ALL'
    
    non_overlapped_file = '{}/expand{}k_fdr_LT_{}_const_NONoverlapped_{}.bed'.format(outdir,int(expand/1000),fdr_thre,cancertype)    
    os.system('python /nv/vol190/zanglab/zw5j/scripts/Modules/find_overlap_keep_info_NOT_sep_strand.py -a {} -b {} -q {} -s hg38 -e2 {}'.format(constitutive_file,fdr_filtered_ids_file,non_overlapped_file,expand))
    os.system('rm {}'.format(fdr_filtered_ids_file))
    #print(fdr_filtered_ids_df)


    # here is to filter out those consitutive bindings that nearby sig_p<0.01 bindings
    # use T-ALL rather than HC for T-ALL case
    log2FC_thre = 1
    fdr_filtered_ids =  select_ids_by_log2FC(cancertype,log2FC_thre)
    fdr_filtered_ids = fdr_filtered_ids.intersection(kept_ids)
    fdr_filtered_ids_df = union_df.loc[fdr_filtered_ids]
    fdr_filtered_ids_file = '{}/{}_fdr_LT_{}.bed'.format(outdir,cancertype,fdr_thre)
    fdr_filtered_ids_df.to_csv(fdr_filtered_ids_file,sep='\t',header=None,index=False)
    
    overlapped_file_add_FC = '{}/expand{}k_fdr_LT_{}_log2FC_LT_{}_const_NONoverlapped_{}.bed'.format(outdir,int(expand/1000),fdr_thre,log2FC_thre,cancertype)    
    os.system('python /nv/vol190/zanglab/zw5j/scripts/Modules/find_overlap_keep_info_NOT_sep_strand.py -a {} -b {} -p {} -s hg38 -e2 0'.format(non_overlapped_file,fdr_filtered_ids_file,overlapped_file_add_FC))
    os.system('rm {}'.format(fdr_filtered_ids_file))
    os.system('rm {}'.format(non_overlapped_file))
    
    
    

def main():

    
    for fdr_thre in [0.01]:
        for expand in [200000]:
            for cancertype in ['T-ALL_LineageCtrl','Breast_cancer','Colon_cancer','Lung_cancer']:
                main_cancertype(cancertype,fdr_thre,expand)
            #exit()



if __name__ == '__main__':

    parser = argparse.ArgumentParser()
    #parser.add_argument('-v', '--viewregion', action = 'store', type = int,dest = 'viewregion', help = 'input file of', metavar = '<int>')
    #parser.add_argument('-n', '--normalization', action = 'store', type = str,dest = 'normalization', help = 'input file of', metavar = '<str>')
    #parser.add_argument('-c', '--chrom', action = 'store', type = str,dest = 'chrom', help = 'input file of', metavar = '<str>')
    #parser.add_argument('-o','--outfile', action = 'store', type = str,dest = 'outfile', help = 'outfile of', metavar = '<file>')
    #parser.add_argument('-i', '--indir', action = 'store', type = str,dest = 'indir', help = 'input dir of ', metavar = '<dir>')
    #parser.add_argument('-o','--outdir', action = 'store', type = str,dest = 'outdir', help = 'outdir of ,default: current dir', metavar = '<dir>',default='./')
    #parser.add_argument('-s','--species', action = 'store', type = str,dest = 'species', help = 'species used to choose correct chromosome, e.g., hg38 or mm10', metavar = '<str>',required=True)
    

    args = parser.parse_args()
    if(len(sys.argv))<0:
        parser.print_help()
        sys.exit(1)
  
    main()
